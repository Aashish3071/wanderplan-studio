generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  password       String?
  accounts       Account[]
  collaborations Collaboration[]
  createdPlaces  Place[]         @relation("PlaceCreator")
  reviews        Review[]
  sessions       Session[]
  trips          Trip[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Trip {
  id            String          @id @default(cuid())
  title         String
  description   String?
  startDate     DateTime?
  endDate       DateTime?
  status        TripStatus      @default(DRAFT)
  isPublic      Boolean         @default(false)
  coverImage    String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  budget        Float?
  destination   String
  collaborators Collaboration[]
  itineraryDays ItineraryDay[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Collaboration {
  id        String            @id @default(cuid())
  role      CollaborationRole
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  tripId    String
  userId    String
  trip      Trip              @relation(fields: [tripId], references: [id], onDelete: Cascade)
  user      User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([tripId, userId])
}

model ItineraryDay {
  id         String     @id @default(cuid())
  date       DateTime
  notes      String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  tripId     String
  activities Activity[]
  trip       Trip       @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([tripId, date])
}

model Activity {
  id             String         @id @default(cuid())
  title          String
  startTime      DateTime
  endTime        DateTime
  description    String?
  type           ActivityType
  cost           Float?
  transportType  TransportType?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  itineraryDayId String
  placeId        String?
  locationId     String?        @unique
  itineraryDay   ItineraryDay   @relation(fields: [itineraryDayId], references: [id], onDelete: Cascade)
  location       Location?      @relation(fields: [locationId], references: [id])
  place          Place?         @relation(fields: [placeId], references: [id])
}

model Place {
  id           String      @id @default(cuid())
  name         String
  description  String?
  type         PlaceType
  address      String?
  website      String?
  phone        String?
  openingHours String?
  priceRange   PriceRange?
  rating       Float?
  imageUrl     String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  createdBy    String
  locationId   String?     @unique
  activities   Activity[]
  creator      User        @relation("PlaceCreator", fields: [createdBy], references: [id])
  location     Location?   @relation(fields: [locationId], references: [id])
  reviews      Review[]
}

model Location {
  id        String    @id @default(cuid())
  latitude  Float
  longitude Float
  address   String?
  name      String?
  activity  Activity?
  place     Place?
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  placeId   String
  userId    String
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum TripStatus {
  DRAFT
  PLANNING
  CONFIRMED
  COMPLETED
  CANCELED
}

enum CollaborationRole {
  OWNER
  EDITOR
  VIEWER
}

enum ActivityType {
  TRANSPORT
  ACCOMMODATION
  ACTIVITY
  FOOD
  OTHER
}

enum TransportType {
  WALK
  TRANSIT
  CAR
  BIKE
  TAXI
  PLANE
  TRAIN
  BUS
  BOAT
  OTHER
}

enum PlaceType {
  ATTRACTION
  RESTAURANT
  HOTEL
  CAFE
  BAR
  MUSEUM
  PARK
  BEACH
  SHOP
  TRANSPORT
  OTHER
}

enum PriceRange {
  FREE
  INEXPENSIVE
  MODERATE
  EXPENSIVE
  VERY_EXPENSIVE
}
